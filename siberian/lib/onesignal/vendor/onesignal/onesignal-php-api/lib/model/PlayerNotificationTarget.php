<?php
/**
 * PlayerNotificationTarget
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  onesignal\client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OneSignal
 *
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: devrel@onesignal.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace onesignal\client\model;

use \ArrayAccess;
use \onesignal\client\ObjectSerializer;

/**
 * PlayerNotificationTarget Class Doc Comment
 *
 * @category Class
 * @package  onesignal\client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PlayerNotificationTarget implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PlayerNotificationTarget';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'include_player_ids' => 'string[]',
        'include_external_user_ids' => 'string[]',
        'include_email_tokens' => 'string[]',
        'include_phone_numbers' => 'string[]',
        'include_ios_tokens' => 'string[]',
        'include_wp_wns_uris' => 'string[]',
        'include_amazon_reg_ids' => 'string[]',
        'include_chrome_reg_ids' => 'string[]',
        'include_chrome_web_reg_ids' => 'string[]',
        'include_android_reg_ids' => 'string[]',
        'include_aliases' => '\onesignal\client\model\PlayerNotificationTargetIncludeAliases',
        'target_channel' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'include_player_ids' => null,
        'include_external_user_ids' => null,
        'include_email_tokens' => null,
        'include_phone_numbers' => null,
        'include_ios_tokens' => null,
        'include_wp_wns_uris' => null,
        'include_amazon_reg_ids' => null,
        'include_chrome_reg_ids' => null,
        'include_chrome_web_reg_ids' => null,
        'include_android_reg_ids' => null,
        'include_aliases' => null,
        'target_channel' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'include_player_ids' => 'include_player_ids',
        'include_external_user_ids' => 'include_external_user_ids',
        'include_email_tokens' => 'include_email_tokens',
        'include_phone_numbers' => 'include_phone_numbers',
        'include_ios_tokens' => 'include_ios_tokens',
        'include_wp_wns_uris' => 'include_wp_wns_uris',
        'include_amazon_reg_ids' => 'include_amazon_reg_ids',
        'include_chrome_reg_ids' => 'include_chrome_reg_ids',
        'include_chrome_web_reg_ids' => 'include_chrome_web_reg_ids',
        'include_android_reg_ids' => 'include_android_reg_ids',
        'include_aliases' => 'include_aliases',
        'target_channel' => 'target_channel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'include_player_ids' => 'setIncludePlayerIds',
        'include_external_user_ids' => 'setIncludeExternalUserIds',
        'include_email_tokens' => 'setIncludeEmailTokens',
        'include_phone_numbers' => 'setIncludePhoneNumbers',
        'include_ios_tokens' => 'setIncludeIosTokens',
        'include_wp_wns_uris' => 'setIncludeWpWnsUris',
        'include_amazon_reg_ids' => 'setIncludeAmazonRegIds',
        'include_chrome_reg_ids' => 'setIncludeChromeRegIds',
        'include_chrome_web_reg_ids' => 'setIncludeChromeWebRegIds',
        'include_android_reg_ids' => 'setIncludeAndroidRegIds',
        'include_aliases' => 'setIncludeAliases',
        'target_channel' => 'setTargetChannel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'include_player_ids' => 'getIncludePlayerIds',
        'include_external_user_ids' => 'getIncludeExternalUserIds',
        'include_email_tokens' => 'getIncludeEmailTokens',
        'include_phone_numbers' => 'getIncludePhoneNumbers',
        'include_ios_tokens' => 'getIncludeIosTokens',
        'include_wp_wns_uris' => 'getIncludeWpWnsUris',
        'include_amazon_reg_ids' => 'getIncludeAmazonRegIds',
        'include_chrome_reg_ids' => 'getIncludeChromeRegIds',
        'include_chrome_web_reg_ids' => 'getIncludeChromeWebRegIds',
        'include_android_reg_ids' => 'getIncludeAndroidRegIds',
        'include_aliases' => 'getIncludeAliases',
        'target_channel' => 'getTargetChannel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TARGET_CHANNEL_PUSH = 'push';
    public const TARGET_CHANNEL_EMAIL = 'email';
    public const TARGET_CHANNEL_SMS = 'sms';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTargetChannelAllowableValues()
    {
        return [
            self::TARGET_CHANNEL_PUSH,
            self::TARGET_CHANNEL_EMAIL,
            self::TARGET_CHANNEL_SMS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['include_player_ids'] = $data['include_player_ids'] ?? null;
        $this->container['include_external_user_ids'] = $data['include_external_user_ids'] ?? null;
        $this->container['include_email_tokens'] = $data['include_email_tokens'] ?? null;
        $this->container['include_phone_numbers'] = $data['include_phone_numbers'] ?? null;
        $this->container['include_ios_tokens'] = $data['include_ios_tokens'] ?? null;
        $this->container['include_wp_wns_uris'] = $data['include_wp_wns_uris'] ?? null;
        $this->container['include_amazon_reg_ids'] = $data['include_amazon_reg_ids'] ?? null;
        $this->container['include_chrome_reg_ids'] = $data['include_chrome_reg_ids'] ?? null;
        $this->container['include_chrome_web_reg_ids'] = $data['include_chrome_web_reg_ids'] ?? null;
        $this->container['include_android_reg_ids'] = $data['include_android_reg_ids'] ?? null;
        $this->container['include_aliases'] = $data['include_aliases'] ?? null;
        $this->container['target_channel'] = $data['target_channel'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTargetChannelAllowableValues();
        if (!is_null($this->container['target_channel']) && !in_array($this->container['target_channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'target_channel', must be one of '%s'",
                $this->container['target_channel'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets include_player_ids
     *
     * @return string[]|null
     * @deprecated
     */
    public function getIncludePlayerIds()
    {
        return $this->container['include_player_ids'];
    }

    /**
     * Sets include_player_ids
     *
     * @param string[]|null $include_player_ids Specific playerids to send your notification to. _Does not require API Auth Key. Do not combine with other targeting parameters. Not compatible with any other targeting parameters. Example: [\"1dd608f2-c6a1-11e3-851d-000c2940e62c\"] Limit of 2,000 entries per REST API call
     *
     * @return self
     * @deprecated
     */
    public function setIncludePlayerIds($include_player_ids)
    {
        $this->container['include_player_ids'] = $include_player_ids;

        return $this;
    }

    /**
     * Gets include_external_user_ids
     *
     * @return string[]|null
     * @deprecated
     */
    public function getIncludeExternalUserIds()
    {
        return $this->container['include_external_user_ids'];
    }

    /**
     * Sets include_external_user_ids
     *
     * @param string[]|null $include_external_user_ids Target specific devices by custom user IDs assigned via API. Not compatible with any other targeting parameters Example: [\"custom-id-assigned-by-api\"] REQUIRED: REST API Key Authentication Limit of 2,000 entries per REST API call. Note: If targeting push, email, or sms subscribers with same ids, use with channel_for_external_user_ids to indicate you are sending a push or email or sms.
     *
     * @return self
     * @deprecated
     */
    public function setIncludeExternalUserIds($include_external_user_ids)
    {
        $this->container['include_external_user_ids'] = $include_external_user_ids;

        return $this;
    }

    /**
     * Gets include_email_tokens
     *
     * @return string[]|null
     */
    public function getIncludeEmailTokens()
    {
        return $this->container['include_email_tokens'];
    }

    /**
     * Sets include_email_tokens
     *
     * @param string[]|null $include_email_tokens Recommended for Sending Emails - Target specific email addresses. If an email does not correspond to an existing user, a new user will be created. Example: nick@catfac.ts Limit of 2,000 entries per REST API call
     *
     * @return self
     */
    public function setIncludeEmailTokens($include_email_tokens)
    {
        $this->container['include_email_tokens'] = $include_email_tokens;

        return $this;
    }

    /**
     * Gets include_phone_numbers
     *
     * @return string[]|null
     */
    public function getIncludePhoneNumbers()
    {
        return $this->container['include_phone_numbers'];
    }

    /**
     * Sets include_phone_numbers
     *
     * @param string[]|null $include_phone_numbers Recommended for Sending SMS - Target specific phone numbers. The phone number should be in the E.164 format. Phone number should be an existing subscriber on OneSignal. Refer our docs to learn how to add phone numbers to OneSignal. Example phone number: +1999999999 Limit of 2,000 entries per REST API call
     *
     * @return self
     */
    public function setIncludePhoneNumbers($include_phone_numbers)
    {
        $this->container['include_phone_numbers'] = $include_phone_numbers;

        return $this;
    }

    /**
     * Gets include_ios_tokens
     *
     * @return string[]|null
     */
    public function getIncludeIosTokens()
    {
        return $this->container['include_ios_tokens'];
    }

    /**
     * Sets include_ios_tokens
     *
     * @param string[]|null $include_ios_tokens Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using iOS device tokens. Warning: Only works with Production tokens. All non-alphanumeric characters must be removed from each token. If a token does not correspond to an existing user, a new user will be created. Example: ce777617da7f548fe7a9ab6febb56cf39fba6d38203... Limit of 2,000 entries per REST API call
     *
     * @return self
     */
    public function setIncludeIosTokens($include_ios_tokens)
    {
        $this->container['include_ios_tokens'] = $include_ios_tokens;

        return $this;
    }

    /**
     * Gets include_wp_wns_uris
     *
     * @return string[]|null
     */
    public function getIncludeWpWnsUris()
    {
        return $this->container['include_wp_wns_uris'];
    }

    /**
     * Sets include_wp_wns_uris
     *
     * @param string[]|null $include_wp_wns_uris Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Windows URIs. If a token does not correspond to an existing user, a new user will be created. Example: http://s.notify.live.net/u/1/bn1/HmQAAACPaLDr-... Limit of 2,000 entries per REST API call
     *
     * @return self
     */
    public function setIncludeWpWnsUris($include_wp_wns_uris)
    {
        $this->container['include_wp_wns_uris'] = $include_wp_wns_uris;

        return $this;
    }

    /**
     * Gets include_amazon_reg_ids
     *
     * @return string[]|null
     */
    public function getIncludeAmazonRegIds()
    {
        return $this->container['include_amazon_reg_ids'];
    }

    /**
     * Sets include_amazon_reg_ids
     *
     * @param string[]|null $include_amazon_reg_ids Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Amazon ADM registration IDs. If a token does not correspond to an existing user, a new user will be created. Example: amzn1.adm-registration.v1.XpvSSUk0Rc3hTVVV... Limit of 2,000 entries per REST API call
     *
     * @return self
     */
    public function setIncludeAmazonRegIds($include_amazon_reg_ids)
    {
        $this->container['include_amazon_reg_ids'] = $include_amazon_reg_ids;

        return $this;
    }

    /**
     * Gets include_chrome_reg_ids
     *
     * @return string[]|null
     */
    public function getIncludeChromeRegIds()
    {
        return $this->container['include_chrome_reg_ids'];
    }

    /**
     * Sets include_chrome_reg_ids
     *
     * @param string[]|null $include_chrome_reg_ids Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Chrome App registration IDs. If a token does not correspond to an existing user, a new user will be created. Example: APA91bEeiUeSukAAUdnw3O2RB45FWlSpgJ7Ji_... Limit of 2,000 entries per REST API call
     *
     * @return self
     */
    public function setIncludeChromeRegIds($include_chrome_reg_ids)
    {
        $this->container['include_chrome_reg_ids'] = $include_chrome_reg_ids;

        return $this;
    }

    /**
     * Gets include_chrome_web_reg_ids
     *
     * @return string[]|null
     */
    public function getIncludeChromeWebRegIds()
    {
        return $this->container['include_chrome_web_reg_ids'];
    }

    /**
     * Sets include_chrome_web_reg_ids
     *
     * @param string[]|null $include_chrome_web_reg_ids Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Chrome Web Push registration IDs. If a token does not correspond to an existing user, a new user will be created. Example: APA91bEeiUeSukAAUdnw3O2RB45FWlSpgJ7Ji_... Limit of 2,000 entries per REST API call
     *
     * @return self
     */
    public function setIncludeChromeWebRegIds($include_chrome_web_reg_ids)
    {
        $this->container['include_chrome_web_reg_ids'] = $include_chrome_web_reg_ids;

        return $this;
    }

    /**
     * Gets include_android_reg_ids
     *
     * @return string[]|null
     */
    public function getIncludeAndroidRegIds()
    {
        return $this->container['include_android_reg_ids'];
    }

    /**
     * Sets include_android_reg_ids
     *
     * @param string[]|null $include_android_reg_ids Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Android device registration IDs. If a token does not correspond to an existing user, a new user will be created. Example: APA91bEeiUeSukAAUdnw3O2RB45FWlSpgJ7Ji_... Limit of 2,000 entries per REST API call
     *
     * @return self
     */
    public function setIncludeAndroidRegIds($include_android_reg_ids)
    {
        $this->container['include_android_reg_ids'] = $include_android_reg_ids;

        return $this;
    }

    /**
     * Gets include_aliases
     *
     * @return \onesignal\client\model\PlayerNotificationTargetIncludeAliases|null
     */
    public function getIncludeAliases()
    {
        return $this->container['include_aliases'];
    }

    /**
     * Sets include_aliases
     *
     * @param \onesignal\client\model\PlayerNotificationTargetIncludeAliases|null $include_aliases include_aliases
     *
     * @return self
     */
    public function setIncludeAliases($include_aliases)
    {
        $this->container['include_aliases'] = $include_aliases;

        return $this;
    }

    /**
     * Gets target_channel
     *
     * @return string|null
     */
    public function getTargetChannel()
    {
        return $this->container['target_channel'];
    }

    /**
     * Sets target_channel
     *
     * @param string|null $target_channel target_channel
     *
     * @return self
     */
    public function setTargetChannel($target_channel)
    {
        $allowedValues = $this->getTargetChannelAllowableValues();
        if (!is_null($target_channel) && !in_array($target_channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'target_channel', must be one of '%s'",
                    $target_channel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['target_channel'] = $target_channel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



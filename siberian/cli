#!/usr/bin/php
<?php

error_reporting(E_ALL);
ini_set('display_errors', 1);

/**
 * Siberian
 *
 * @version 5.0.8
 * @author Xtraball SAS <dev@xtraball.com>
 */

use Siberian\Info;
use Siberian\Translation;
use Siberian\Manifest;
use Siberian\ClamAV;
use Siberian\Cli\Colors;
use Siberian_Cron as Cron;
use Siberian_Cache as Cache;
use Siberian_Google_Geocoding as Geocoding;
use Siberian_Cache_Design as CacheDesign;

require_once __DIR__ . '/lib/System/polyfills.php';

global $_config;

date_default_timezone_set('Europe/London');

if (!file_exists('./config.php')) {
    copy('./config.sample.php', './config.php');
}

require_once __DIR__ . '/config.php';
require_once __DIR__ . '/lib/Siberian/Cli/Colors.php';

/**
 * @param $string
 * @param null $fg
 * @param null $bg
 * @return string
 */
function color($string, $fg = null, $bg = null): string
{
    return Colors::initColoredString($string, $fg, $bg);
}

set_time_limit(300);
ini_set('max_execution_time', 300);
umask(0);

setlocale(LC_MONETARY, 'en_US');

require_once __DIR__ . '/lib/System/defines.php';

defined('APPLICATION_PATH')
|| define('APPLICATION_PATH', realpath(__DIR__ . '/app'));

// Sourcing default libs!
set_include_path(implode_polyfill(PATH_SEPARATOR, array(
    dirname(APPLICATION_PATH) . '/lib',
)));

/**
 *
 */
function dbg()
{
    $args = func_get_args();
    foreach ($args as $arg) {
        file_put_contents(
            __DIR__ . '/var/tmp/debug.log',
            date('d/m/Y H:i:s') . ': ' . print_r($arg, true) . PHP_EOL,
            FILE_APPEND);
    }
}

require_once __DIR__ . '/lib/Zend/Application.php';

// Initializing the application!
$ini = is_readable(APPLICATION_PATH . '/configs/app.ini') ?
    APPLICATION_PATH . '/configs/app.ini' : APPLICATION_PATH . '/configs/app.sample.ini';

$application = new Zend_Application(
    $_config['environment'],
    [
        'config' => [
            $ini,
            APPLICATION_PATH . '/configs/resources.cachemanager.ini',
        ],
    ]
);

$config = new Zend_Config($application->getOptions(), true);
Zend_Registry::set('config', $config);
Zend_Registry::set('_config', $_config);

//session_cache_limiter(false);

$application->bootstrap();

echo color('Siberian CLI', 'blue') . "\n\n";

try {
    $action = isset($argv[1]) ? $argv[1] : '';

    $GLOBALS['argv'] = $argv;

    if (!empty($action)) {
        echo color("[Action] {$action}", 'green') . "\n";
    }

    if (array_key_exists('cron:tasks', $_config)) {
        $userTasks = $_config['cron:tasks'];
        if (array_key_exists($action, $userTasks)) {
            $userTasks[$action]();
            return;
        }
    }

    if (array_key_exists('cli:tasks', $_config)) {
        $userTasks = $_config['cli:tasks'];
        if (array_key_exists($action, $userTasks)) {
            $userTasks[$action]();
            return;
        }
    }

    switch ($action) {
        case 'info':
        case 'infos':
            // Fetching information
            Info::printLn();

            print_r(get_include_path());

            break;
        case 'export:schemas':
        case 'export-schemas':
            (new Siberian_Migration_Db())
                ->exportAll();
            break;
        case 'export:database':
        case 'export-database':
            $dbParams = $config->resources->db->params;
            $filename = readline('Filename for the export: ');
            if (is_file($filename)) {
                $erase = readline('The given file already exists, would you like to replace it? (Y/n): ');
                if ($erase !== 'Y') {
                    echo 'Aborting.' . PHP_EOL;
                    die();
                }
            }
            $command = sprintf("mysqldump -h %s -u %s --password='%s' %s -r '%s'",
                $dbParams->host,
                $dbParams->username,
                $dbParams->password,
                $dbParams->dbname,
                $filename);
            exec($command);
            echo 'Export done.' . PHP_EOL;
            break;
        case 'password':
            $options = [
                'uppercase' => true,
                'numeric' => true,
                'special' => true,
            ];

            $length = $argv[2] && is_int($argv[2]) ? $argv[2] : 24;

            foreach ($argv as $arg) {
                if ($arg === '--no-uppercase') {
                    $options['uppercase'] = false;
                }
                if ($arg === '--no-numeric') {
                    $options['numeric'] = false;
                }
                if ($arg === '--no-special') {
                    $options['special'] = false;
                }
            }

            echo generate_strong_password($length, $options);
            echo PHP_EOL;
            break;
        case 'version':
            $newVersion = $argv[2];
            if (empty($newVersion)) {
                echo 'Nw version is empty, aborting.' . PHP_EOL;
                die();
            }

            $versionContent = file_get_contents('./lib/Siberian/Version.php');
            $versionContent = preg_replace("#const VERSION = '([0-9a-z\.\-]+)';#im",
                'const VERSION = \'' . $argv[2] . '\';', $versionContent);
            file_put_contents('./lib/Siberian/Version.php', $versionContent);
            break;
        case 'user:update-password':
            $userEmail = readline('Input backoffice user e-mail to change: ');
            $backofficeUser = (new Backoffice_Model_User())
                ->find($userEmail, 'email');
            if (!$backofficeUser->getId()) {
                echo 'Sorry this e-mail doesn\'t exists.' . PHP_EOL;
            } else {
                $newPassword = null;
                $testPassword = static function () use ($backofficeUser) {
                    $newPassword = readline('Your new password (min 9 characters, 1 uppercase letter, 1 lowercase, 1 number & 1 special character): ');
                    try {
                        set_password_object($backofficeUser, $newPassword);
                        return true;
                    } catch (\Exception $e) {
                        echo $e->getMessage() . PHP_EOL;
                        return false;
                    }
                };

                do {
                    $newPassword = $testPassword();
                } while (!$newPassword);

                // Then save!
                $backofficeUser->save();

                echo 'Password successfully changed.' . PHP_EOL;
            }
            break;
        case 'https':
            if (!isset($argv[2])) {
                echo 'Valid arguments are: on, off, 0, 1, true, false' . PHP_EOL;
                die();
            }

            switch ($argv[2]) {
                case 'on':
                case '1':
                case 'true':
                    $state = 'true';
                    break;
                case 'off':
                case '0':
                case 'false':
                    $state = 'false';
                    break;

                default:
                    echo 'Valid arguments are: on, off, 0, 1, true, false' . PHP_EOL;
                    die();
            }

            $configContent = file_get_contents('./config.php');
            // Check if `redirect_https` is present first
            if (strpos($configContent, 'redirect_https') === false) {
                $configContent = $configContent . "\n\n" . '$_config[\'redirect_https\'] = ' . $state . ';';
            } else {
                $configContent = preg_replace('#\$_config\[("|\')redirect_https("|\')\] = ("|)(true|false)("|);#im',
                    '$_config[\'redirect_https\'] = ' . $state . ';', $configContent);
            }

            file_put_contents('./config.php', $configContent);

            echo 'Soft HTTP>HTTPS redirection set to ' . $state . PHP_EOL;
            break;

        case 'test:http2':
            try {
                if (!defined('CURL_HTTP_VERSION_2_0')) {
                    define('CURL_HTTP_VERSION_2_0', 3);
                }
                $ch = curl_init();
                curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_2_0);
                $host = 'https://api.development.push.apple.com';
                curl_setopt_array($ch, [
                    CURLOPT_URL => "$host/3/device/74fbf7e296f6c94755832a48476182e4e9586a380116e18a46531b62349504f1",
                    CURLOPT_PORT => 443,
                    CURLOPT_POST => true,
                    CURLOPT_POSTFIELDS => json_encode([]),
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_TIMEOUT => 10,
                    CURLOPT_SSL_VERIFYPEER => false,
                    CURLOPT_HEADER => 1
                ]);

                $result = curl_exec($ch);
                if ($result === false) {
                    throw new \Exception('Curl failed with error: ' . curl_error($ch));
                }

                if (strpos($result, 'HTTP/2') !== 0) {
                    throw new \Exception('Request doesn\'t match HTTP/2');
                }

                echo 'HTTP/2 support: Available' . PHP_EOL;

            } catch (\Exception $e) {
                echo 'HTTP/2 support: ' . $e->getMessage() . PHP_EOL;
            }
            break;

        case 'user:create':
            $userEmail = readline('Input new backoffice user e-mail: ');
            $backofficeUser = (new Backoffice_Model_User())
                ->find($userEmail, 'email');

            if ($backofficeUser->getId()) {
                echo 'Sorry this e-mail is used.' . PHP_EOL;
                die();
            }

            $newPassword = null;
            $testPassword = static function () {
                $newPassword = readline('Input new backoffice user password: ');
                if (strlen($newPassword) < 6) {
                    echo 'Password too short.' . PHP_EOL;
                    return false;
                }
                return $newPassword;
            };

            do {
                $newPassword = $testPassword();
            } while (!$newPassword);

            $backofficeUser
                ->setEmail($userEmail)
                ->setPassword($newPassword)
                ->save();

            echo 'Your new user is now created.' . PHP_EOL;

            break;

        case 'user:create:args':
            $userEmail = $argv[2];
            $backofficeUser = (new Backoffice_Model_User())
                ->find($userEmail, 'email');

            if ($backofficeUser->getId()) {
                echo 'Sorry this e-mail is used.' . PHP_EOL;
                die();
            }

            $newPassword = $argv[3];
            if (strlen($newPassword) < 6) {
                echo 'Password too short.' . PHP_EOL;
                return false;
            }

            $backofficeUser
                ->setEmail($userEmail)
                ->setPassword($newPassword)
                ->save();

            echo 'Your new user is now created.' . PHP_EOL;

            break;


        case 'dev':
        case 'development':
            $configContent = file_get_contents('./config.php');
            $configContent = preg_replace('#\$_config\[("|\')environment("|\')\] = ("|\')(development|production)("|\');#im',
                '$_config[\'environment\'] = \'development\';', $configContent);
            file_put_contents('./config.php', $configContent);
            __set('environment', 'development');
            break;
        case 'prod':
        case 'production':
            $configContent = file_get_contents('./config.php');
            $configContent = preg_replace('#\$_config\[("|\')environment("|\')\] = ("|\')(development|production)("|\');#im',
                '$_config[\'environment\'] = \'production\';', $configContent);
            file_put_contents('./config.php', $configContent);
            __set('environment', 'production');
            break;
        case 'cache:design':
            CacheDesign::rebuild($argv[2]);
            break;
        case 'cache:clear':
            Cache::__clearCache();
            Cache::__clearLog();
            Cache::__clearTmp();
            break;
        case 'license:set':
            if (isset($argv[2])) {
                $license = (string)$argv[2];
            } else {
                $license = readline('New license: ');
            }
            if (!empty($license)) {
                __set('siberiancms_key', trim($license));
                echo 'Your license is updated to "' . $license . '".' . PHP_EOL;
            } else {
                echo 'Aborting, empty license.' . PHP_EOL;
            }
            break;
        case 'i18n:extract':
            $module = null;
            $context = false;
            if (isset($argv[2])) {
                $module = (string)$argv[2];
            }
            if (isset($argv[3])) {
                $context = (string)$argv[3];
            }
            Translation::extractAll($module, $context);
            break;
        case 'app:manifest':
            $skipCache = false;
            if (isset($argv[2]) &&
                $argv[2] === '--skip-cache') {
                $skipCache = true;
            }
            Manifest::rebuild($skipCache);
            break;
        case 'app:keystore:restore':
            $deviceId = 2;
            if (isset($argv[2])) {
                $appId = (integer)$argv[2];
            } else {
                $appId = readline('Input app id: ');
            }

            $basePath = path('/var/tmp');

            $app = (new Application_Model_Application())
                ->find($appId, 'app_id');

            if (!$app->getId()) {
                echo "Sorry app_id doesn't exists." . PHP_EOL;
            } else {
                $device = $app->getDevice($deviceId);
                $pks = $device->getPks();
                if (!$pks) {
                    echo 'Sorry no pks for this app in db.' . PHP_EOL;
                } else {

                    $pks = hex2bin($pks);
                    file_put_contents($basePath . '/restored_' . $appId . '.pks', $pks);

                    exec("echo \"\" | keytool -list -keystore " . $basePath . "/restored_" . $appId . ".pks",
                        $output);

                    echo 'Pks restored with signature (' . $basePath . '/restored_' . $appId . '.pks' . '): ' . PHP_EOL;
                    foreach ($output as $out) {
                        if (false !== strpos($out, 'SHA1')) {
                            echo $out . PHP_EOL;
                        }
                    }
                }
            }
            break;
        case 'security:scan':
            $clamav = new ClamAV();
            if ($clamav->ping()) {
                if (isset($argv[2])) {
                    $filename = (string)$argv[2];
                } else {
                    $filename = readline('File to scan: ');
                }

                $clamav->scan($filename);
                echo 'Result: ' . $clamav->getMessage() . PHP_EOL;
            } else {
                echo 'No answer after PING.' . PHP_EOL;
            }
            break;
        case 'subscription:check-payments':
            if (method_exists('Subscription_Model_Subscription_Application', 'checkRecurrencies')) {
                \Subscription_Model_Subscription_Application::checkRecurrencies(new Cron());
            }
            break;
        case 'subscription:sync':
            // Update subscription statuses cache!
            if (method_exists('Subscription_Model_Subscription_Application', 'cacheStatusesAndSync')) {
                \Subscription_Model_Subscription_Application::cacheStatusesAndSync(new Cron());
            }
            break;
        case 'google:test-api-key':
            if (isset($argv[2])) {
                $apiKey = (string)$argv[2];
            } else {
                $apiKey = readline('API Key to test: ');
            }

            try {
                $result = Geocoding::testApiKey($apiKey);
                if ($result) {
                    echo 'API Key ok, thanks.' . PHP_EOL;
                }
            } catch (\Exception $e) {
                echo 'Something went wrong: ' . $e->getMessage() . PHP_EOL;
            }

            break;

        // Firewall rules
        case 'waf:status':
            $status = __get('waf_enabled');
            if ($status === '1') {
                echo 'WAF is enabled.' . PHP_EOL;
            } else {
                echo 'WAF is disabled.' . PHP_EOL;
            }
            break;
        case 'waf:enable':
            __set('waf_enabled', '1');
            break;
        case 'waf:disable':
            __set('waf_enabled', '0');
            break;

        case 'waf:extension:list':
            echo 'List of extensions allowed.' . PHP_EOL;
            echo implode_polyfill(PHP_EOL, \Firewall_Model_Rule::listExtensions());
            echo PHP_EOL;

            break;
        case 'waf:extension:allow':
            try {
                if (isset($argv[2])) {
                    \Firewall_Model_Rule::allowExtension($argv[2]);
                } else {
                    $extension = readline('Input extension to allow: ');
                    \Firewall_Model_Rule::allowExtension($extension);
                }
                echo 'Extension allowed.' . PHP_EOL;
            } catch (\Exception $e) {
                echo $e->getMessage() . PHP_EOL;
            }

            break;
        case 'waf:extension:disallow':
            try {
                if (isset($argv[2])) {
                    \Firewall_Model_Rule::disallowExtension($argv[2]);
                } else {
                    $extension = readline('Input extension to disallow: ');
                    \Firewall_Model_Rule::disallowExtension($extension);
                }
                echo 'Extension disallowed.' . PHP_EOL;
            } catch (\Exception $e) {
                echo $e->getMessage() . PHP_EOL;
            }
            break;
        // Firewall rules

        case 'help':
        default:
            echo color('== Siberian CLI Help ==', 'blue') . "
            
" . color('info|infos', 'brown') . "
    Prints generic information about the current installation.
    
" . color('export:schemas', 'brown') . "
    Export current tables schema to /var/schema/%VERSION%/ to php files.
    
" . color('export:database', 'brown') . "
    Export complete database.
    
" . color('version <version>', 'brown') . "
    Changes the current version to <version>.

" . color('user:update-password', 'brown') . "
    Change / Reset a backoffice user password.

" . color('user:create', 'brown') . "
    Create a new backoffice user.

" . color('development|dev', 'brown') . "
    Set environment to 'development'.

" . color('production|prod', 'brown') . "
    Set environment to 'production'.

" . color('cache:design <sae|mae|pe>', 'brown') . "
    Rebuilds sae/mae/pe cache design.
    
" . color('cache:clear', 'brown') . "
    Clear var/cache, var/log & var/tmp.
    
" . color('license:set <license>', 'brown') . "
    Update your license to <license>.
    
" . color('i18n:extract', 'brown') . "
    Extracts all missing translations.
    
" . color('app:manifest [--skip-cache]', 'brown') . "
    Rebuilds the application manifest.
    
" . color('app:keystore:restore <appId>', 'brown') . "
    Extract a saved PKS (Keystore) from the database backup for the given <appId>.
    
" . color('security:scan <filePath>', 'brown') . "
    Scan the given <filePath> with ClamAV (if configured in your Backoffice).
    
" . color('subscription:check-payments', 'brown') . "
    Manually run payment verification for expired subscriptions (only for PE, this action is normally triggered by the cron).
    
" . color('subscription:sync', 'brown') . "
    Manually cache payment statuses.
    
" . color('google:test-api-key <apiKey>', 'brown') . "
    Testing a GoogleMaps API key.
    
" . color('https <on/off>', 'brown') . "
    Switch redirect to https to on or off
    
" . color('test:http2', 'brown') . "
    Test if HTTP/2 support is available in php-curl for the cli & cron.
    
" . color('waf:status', 'brown') . "
    Get the Web Application Firewall status.    
    
" . color('waf:enable', 'brown') . "
    Enables the Web Application Firewall.    
    
" . color('waf:disable', 'brown') . "
    Disables the Web Application Firewall.    
    
" . color('waf:extension:list', 'brown') . "
    Display the extensions currently allowed in the Web Application Firewall.    
    
" . color('waf:extension:allow [extension]', 'brown') . "
    Allows a new extension in the Web Application Firewall.    
    
" . color('waf:extension:disallow [extension]', 'brown') . "
    Disallows an extension in the Web Application Firewall.    
    
" . color('help', 'brown') . "
    Prints the current help message.    

";
    }
} catch (Exception $e) {
    echo $e->getMessage() . PHP_EOL;
}

echo color('done.', 'green') . "\n";
